{
  "questions": [
    {
      "category": "Base",
      "title": "Что будет выведено в консоль: console.log(typeof(undefined));",
      "variants": [
        "'undefined'",
        "'null'",
        "'object'",
        "'number'"
      ],
      "correct": 0,
      "explain": [
        "Оператор typeof возвращает тип операнда.",
        "undefined - это значение, которое получает переменная, если она не была инициализирована.",
        "Таким образом, typeof(undefined) вернет 'undefined'."
      ]
    },
    {
      "category": "Base",
      "title": "Какое значение будет содержать переменная x после выполнения следующего кода: let x = 10 % 3;",
      "variants": [
        "1",
        "3",
        "0.1",
        "7"
      ],
      "correct": 0,
      "explain": [
        "Оператор % возвращает остаток от деления.",
        "10 % 3 = 1",
        "Таким образом, переменная x будет содержать число 1."
      ]
    },
    {
      "category": "Base",
      "title": "Какой результат выведет этот код: console.log(typeof(''));",
      "variants": [
        "'string'",
        "'object'",
        "'undefined'",
        "'number'"
      ],
      "correct": 0,
      "explain": [
        "Оператор typeof возвращает тип операнда.",
        "'' - это пустая строка.",
        "Таким образом, typeof('') вернет 'string'."
      ]
    },
    {
      "category": "Base",
      "title": "Какое значение будет содержать переменная x после выполнения следующего кода: let x = parseInt('3.14');",
      "variants": [
        "3.14",
        "3",
        "14",
        "NaN"
      ],
      "correct": 1,
      "explain": [
        "Функция parseInt преобразует строку в целое число.",
        "Если в строке содержатся символы, отличные от цифр, они игнорируются.",
        "В результате выполнения функции parseInt('3.14') получим число 3.",
        "Таким образом, переменная x будет содержать число 3."
      ]
    },
    {
      "category": "Base",
      "title": "Какой результат выведет этот код: typeof(null);",
      "variants": [
        "'object'",
        "'null'",
        "'undefined'",
        "'number'"
      ],
      "correct": 0,
      "explain": [
        "Оператор typeof возвращает тип операнда.",
        "null имеет специальный примитивный тип 'object'.",
        "Таким образом, typeof(null) вернет 'object'."
      ]
    },
    {
      "category": "Base",
      "title": "Какое значение будет содержать переменная x после выполнения следующего кода: let x = '5' + 10 - 2;",
      "variants": [
        "13",
        "53",
        "510-2",
        "NaN"
      ],
      "correct": 3,
      "explain": [
        "При сложении строки и числа, строка преобразуется в число и происходит сложение:",
        "'5' + 10 => '510'",
        "Затем от числа 2 вычитается число 510, результат:",
        "510 - 2 => 508",
        "Таким образом, переменная x будет содержать число 508."
      ]
    },
    {
      "category": "Base",
      "title": "Что будет выведено в консоль?",
      "variants": [
        "F.L",
        "F.L.",
        "fl",
        "F.l"
      ],
      "correct": 0,
      "img": 1,
      "explain": [
        "'Firstname Lastname'.split(' ') => ['Firstname','Lastname']",
        "'Firstname Lastname'.split(' ').map((x) => x[0].toUpperCase()) => ['F','L']",
        "Full => F.L"
      ]
    },
    {
      "category": "Base",
      "title": "Чему равна переменная с: ",
      "variants": [
        "8",
        "10",
        "6",
        "undefined"
      ],
      "correct": 1,
      "img": 2,
      "explain": [
        "Ничего обычного, ответ: 10"
      ]
    },
    {
      "category": "Base",
      "title": "Какой метод следует использовать вместо __, чтобы получить ожидаемый результат?",
      "variants": [
        "call",
        "bind",
        "apply"
      ],
      "correct": 0,
      "img": 3,
      "explain": [
        "call => 3",
        "bind => ound add() {}",
        "apply => TypeError"
      ]
    },
    {
      "category": "Base",
      "title": "Какой будет результат?",
      "variants": [
        "false",
        "true"
      ],
      "correct": 1,
      "img": 4,
      "explain": [
        "Оператор запята выполняет каждый из его операндов (слева направо)",
        "Последний операнд - 5 > 0, который возращает true"
      ]
    },
    {
      "category": "Base",
      "title": "Какое доступное имя переменной?",
      "variants": [
        "#a",
        "$a",
        "?a",
        "!a"
      ],
      "correct": 1,
      "explain": [
        "js использует только буквы, символы $ и _",
        "Первый символ не должен быть цифрой"
      ]
    },
    {
      "category": "Base",
      "title": "Что будет выведено в консоль?",
      "variants": [
        "NaN",
        "16",
        "7",
        "9"
      ],
      "correct": 2,
      "img": 5,
      "explain": [
        "js использует только буквы, символы $ и _",
        "Первый символ не должен быть цифрой"
      ]
    },
    {
      "category": "Base",
      "title": "Какой будет результат выполнения следующего кода?",
      "variants": [
        "10",
        "11",
        "12",
        "13"
      ],
      "correct": 2,
      "img": 6,
      "explain": [
        "Код создает массив из 3 элементов, каждый элемент - это новый объект класса Rectangle. При вызове метода calculateArea для каждого элемента, происходит вычисление площади прямоугольника по формуле: длина * ширина.",
        "Для первого прямоугольника: 2 * 3 = 6",
        "Для второго прямоугольника: 4 * 2 = 8",
        "Для третьего прямоугольника: 3 * 3 = 9",
        "Затем значения площадей складываются: 6 + 8 + 9 = 23",
        "Итоговый результат: 12 / 23 = 0.5217, что эквивалентно 11 при округлении до ближайшего целого числа."
      ]
    },
    {
      "category": "Base",
      "title": "Какое значение будет содержать переменная x после выполнения следующего кода: let x = 5 * '2' + 3;",
      "variants": [
        "10",
        "13",
        "23",
        "25"
      ],
      "correct": 3,
      "img": 7,
      "explain": [
        "При умножении числа на строку, строка преобразуется в число и происходит умножение:",
        "5 * '2' => 10",
        "Затем к числу 10 прибавляется число 3, результат:",
        "10 + 3 => 13",
        "Таким образом, переменная x будет содержать число 13."
      ]
    },
    {
      "category": "Base",
      "title": "Что будет выведено в консоль при выполнении следующего кода?",
      "variants": [
        "Ошибка",
        "undefined",
        "null",
        "123"
      ],
      "correct": 3,
      "img": 8,
      "explain": [
        "В коде создается объект с методом foo, который возвращает значение свойства x объекта. В следующей строке кода создается переменная bar и присваивается ей значение метода foo, но без контекста. То есть this в методе foo будет ссылаться на объект window.",
        "В строке кода bar() метод foo будет вызван без аргументов и вернет значение свойства x объекта window, которое равно 123.",
        "Значение 123 будет выведено в консоль."
      ]
    },
    {
      "category": "Arrays",
      "title": "В чем разница между  == и ===?",
      "variants": [
        "Операторы === и !== являются операторами строгого сравнения. Значит, если операнды имеют разные типы, то не являются равными",
        "Это функция",
        "Это тот же HTML, но с возможностью выполнять JS-код",
        "Это тот же HTML, но с возможностью выполнять JS-код"
      ],
      "correct": 2,
      "explain": [
        "Ничего обычного, ответ: 10"
      ]
    },
    {
      "category": "Arrays",
      "title": "Что выведет следующий код?",
      "variants": [
        "[]",
        "[0, 1, 2, 3, 4]",
        "0, 1, 2, 3, 4",
        "undefined"
      ],
      "correct": 1,
      "img": 1,
      "explain": [
        "Код создает массив arr с длиной 5 и задает значения его элементам с помощью метода fill().",
        "Метод fill() принимает два параметра: значение, которое нужно задать всем элементам массива, и начальный индекс.",
        "При вызове метода join() без параметров, элементы массива объединяются в строку с использованием запятых в качестве разделителей:",
        "arr.join() => '0,1,2,3,4'",
        "Ответ: []"
      ]
    },
    {
      "category": "Arrays",
      "title": "Какой будет результат выполнения следующего кода: const arr = [1, 2, 3, 4]; arr.pop(); console.log(arr);",
      "variants": [
        "[1, 2, 3, 4]",
        "[2, 3, 4]",
        "[1, 2, 3]",
        "[1, 2, 3, 'undefined']"
      ],
      "correct": 2,
      "explain": [
        "Метод pop() удаляет последний элемент массива и возвращает его значение. В данном случае, после выполнения кода массив arr будет иметь вид: [1, 2, 3].",
        "Поэтому правильный ответ - [2, 3, 4]."
      ]
    },
    {
      "category": "Arrays",
      "title": "Какой будет результат выполнения следующего кода: const arr = [1, 2, 3]; arr.splice(1, 1); console.log(arr);",
      "variants": [
        "[1, 3]",
        "[2, 3]",
        "[1, 2]",
        "[1, 2, 3]"
      ],
      "correct": 0,
      "explain": [
        "Метод splice изменяет массив, удаляя или заменяя элементы. Первый аргумент метода указывает индекс, с которого начинается изменение. Второй аргумент указывает количество элементов, которые будут удалены из массива. В данном случае мы начинаем с индекса 1 и удаляем 1 элемент.",
        "После выполнения метода массив будет выглядеть следующим образом: [1, 3].",
        "Ответ: [1, 3]."
      ]
    },
    {
      "category": "Arrays",
      "title": "Какой результат вернет метод map для массива [1, 2, 3]?",
      "variants": [
        "[1, 4, 9]",
        "[2, 4, 6]",
        "[2, 3, 4]",
        "[1, 2, 3, 4, 5, 6]"
      ],
      "correct": 1,
      "explain": [
        "Метод map применяет функцию обратного вызова к каждому элементу массива и возвращает новый массив, содержащий результаты вызовов этой функции.",
        "В данном случае, функция обратного вызова возводит каждый элемент в квадрат.",
        "1^2 = 1, 2^2 = 4, 3^2 = 9",
        "Таким образом, метод map вернет новый массив [1, 4, 9]."
      ]
    },
    {
      "category": "Arrays",
      "title": "Что будет выведено в консоль после выполнения следующего кода?",
      "img": 3,
      "variants": [
        "[1, 4, 9, 16, 25]",
        "[1, 2, 3, 4, 5]",
        "[2, 4, 6, 8, 10]",
        "[1, 3, 5, 7, 9]"
      ],
      "correct": 0,
      "explain": [
        "Код создает массив numbers, содержащий числа от 1 до 5. Затем метод map вызывается на этом массиве и применяет функцию num => num * num к каждому элементу. Эта функция возвращает квадрат числа. Результат вызова метода map - новый массив, содержащий квадраты исходных чисел. Таким образом, в консоль будет выведен массив [1, 4, 9, 16, 25]."
      ]
    },
    {
      "category": "Arrays",
      "title": "Какой будет результат выполнения следующего кода? const array = [1, 2, 3]; array.shift(); array.pop(); array.push(4, 5);",
      "variants": [
        "[2, 3, 4, 5]",
        "[1, 2, 3, 4, 5]",
        "[1, 3, 5]",
        "[4, 5]"
      ],
      "correct": 3,
      "explain": [
        "Метод shift() удаляет первый элемент массива, поэтому массив становится равным [2, 3].",
        "Метод pop() удаляет последний элемент массива, поэтому массив становится равным [2].",
        "Метод push() добавляет элементы в конец массива, поэтому после вызова этого метода массив становится равным [2, 4, 5].",
        "Таким образом, правильный ответ - [1, 3, 5]."
      ]
    },
    {
      "category": "Arrays",
      "title": "Какой будет результат выполнения следующего кода: const numbers = [1, 2, 3]; const newNumbers = [...numbers, 4, 5]; console.log(newNumbers);",
      "variants": [
        "[1, 2, 3, 4, 5]",
        "[4, 5, 1, 2, 3]",
        "[1, 2, 3, [4, 5]]",
        "Ошибка"
      ],
      "correct": 1,
      "explain": [
        "Оператор расширения (spread operator) позволяет расширять массивы и объекты на месте, включая другие массивы и объекты. В данном случае, мы создаем новый массив newNumbers и добавляем в него все элементы из массива numbers, а затем добавляем два новых элемента 4 и 5.",
        "Результат выполнения кода будет: [1, 2, 3, 4, 5]"
      ]
    },
    {
      "category": "Arrays",
      "title": "Какой метод массива можно использовать для удаления последнего элемента?",
      "variants": [
        ".pop()",
        ".shift()",
        ".slice()",
        ".splice()"
      ],
      "correct": 1,
      "explain": [
        "Метод .pop() используется для удаления последнего элемента из массива и возвращает удаленный элемент.",
        "Метод .shift() используется для удаления первого элемента из массива и возвращает удаленный элемент.",
        "Метод .slice() используется для создания копии части массива и не изменяет исходный массив.",
        "Метод .splice() используется для удаления элементов из массива и добавления новых элементов на их место."
      ]
    },
    {
      "category": "Arrays",
      "title": "Какой метод можно использовать для добавления нового элемента в конец массива?",
      "variants": [
        "concat()",
        "push()",
        "shift()",
        "unshift()"
      ],
      "correct": 1,
      "explain": [
        "Метод push() используется для добавления нового элемента в конец массива.",
        "Остальные методы имеют другие назначения:",
        "Метод concat() создает новый массив, который содержит элементы исходного массива и другие переданные в качестве аргументов массивы или значения;",
        "Метод shift() удаляет первый элемент массива и сдвигает все остальные элементы на одну позицию влево;",
        "Метод unshift() добавляет один или несколько элементов в начало массива и сдвигает все остальные элементы на одну позицию вправо."
      ]
    },
    {
      "category": "AsyncPromises",
      "title": "Что будет выведено в консоль?",
      "variants": [
        "Результат метода fetch",
        "Результат обратного вызова в предыдущем .then()",
        "Результат второго метода fetch"
      ],
      "correct": 1,
      "img": 1,
      "explain": [
        "Метод then возвращает Promise, который позволяет создавать цепочки методов",
        "Если функция, переданная как обработчик в then, позвращает Promise, эквивалентный Promise будет представлен последниму then в цепочке"
      ]
    },
    {
      "category": "AsyncPromises",
      "title": "Какой будет результат выполнения следующего кода?",
      "variants": [
        "1, 2, 3",
        "3, 2, 1",
        "3, 1, 2",
        "2, 1, 3"
      ],
      "correct": 1,
      "img": 2,
      "explain": [
        "Код создает 3 промиса, каждый из которых возвращает свой порядковый номер. Затем они передаются в функцию Promise.all, которая ждет, пока все промисы будут выполнены и возвращает массив результатов в том порядке, в котором промисы были переданы. В данном случае, первым выполнится промис с номером 1, затем с номером 2 и, наконец, с номером 3. Поэтому, результатом будет массив [1, 2, 3]."
      ]
    },
    {
      "category": "AsyncPromises",
      "title": "Какой будет результат выполнения следующего кода?",
      "variants": [
        "null",
        "undefined",
        "TypeError",
        "ReferenceError"
      ],
      "correct": 1,
      "img": 4,
      "explain": [
        "В данном коде происходит обращение к переменной x внутри функции, которая была определена снаружи функции. При этом переменная x не была объявлена с использованием ключевого слова var, let или const, поэтому она попадает в глобальную область видимости.",
        "Внутри функции происходит вызов setTimeout, который откладывает выполнение функции на 0 миллисекунд. В момент вызова setTimeout переменная x равна undefined, так как она определена внутри блока, но не была проинициализирована.",
        "После вызова setTimeout происходит изменение значения переменной x на 'hello', но это не влияет на значение переменной, которое было передано в качестве параметра в функцию, переданную в setTimeout.",
        "Таким образом, после завершения setTimeout функция, переданная в качестве параметра, получает значение undefined в качестве аргумента, и выводит его в консоль.",
        "Ответ: undefined"
      ]
    }
  ]
}